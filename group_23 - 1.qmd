---
title: "ADD TITLE"
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf: default
editor_options: 
  chunk_output_type: console
execute:
  eval: true
  warning: false
  message: false
---

```{r}
library(tidyverse)
library(janitor)
library(ggplot2)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(GGally)
library(gt)
library(pROC)
library(randomForest)
library(caret)
```

# Introduction
The surge in spam emails leads to wasted time, security risks, and financial losses. To address this issue, companies rely on spam filters to automatically classify emails and minimize disruptions. Therefore, studying the key text features that influence whether an email is classified as spam is crucial.
**Research Question**
Which text characteristics influence whether an email will be classified as spam or not? 
#Exploratory Data Analysis

##Description of Data

###Data Source
This dataset were collected at Hewlett-Packard Labs and shared with the UCI Machine Learning Repository. The dataset contains data on classifying emails as spam or not spam, with additional variables indicating the frequency of certain words and characters in the email.
```{r}
data<-read.csv('C:/Users/apple/Desktop/DAS_Group/dataset23.csv') 
data$yesno<-as.factor(data$yesno) 
data <- data[rowSums(data[, 2:6] > 1) == 0, ] # the percentage of total numbe can not be greater than 1
```

###Varaible Description

This table provides variable descriptions to ensure clarity in their interpretation.
```{r}
#| label: table0
#| tbl-cap: Description of Variables
variable <- data.frame(
  VariableName = colnames(data),  
  Description = c("Total length of uninterrupted sequences of capitals ",  
                  "Occurrences of the dollar sign, as a percentage of total number of characters ",
                  " Occurrences of ‘!’, as a percentage of total number of characters ",
                  "Occurrences of ‘money’, as a percentage of total number of characters",
                  "Occurrences of the string ‘000’, as a percentage of total number of characters ",
                  "Occurrences of ‘make’, as a percentage of total number of characters ",
                  "A factor variable indicating if the email was spam, ‘y’, or not spam, ‘n’"),
  Type = sapply(data, class)
)
variable %>%
  gt() %>%
  tab_header(
    title = "Description of Variables"
  ) %>%
  tab_options(
    table.width = pct(100)
  )
```

###Data Visualization

####summary of data
This table shows the summary of the data.
```{r}
#| label: table 1
#| tbl-cap: summary of mean
data |>
  summarize(
    crl.tot = mean(crl.tot),
    dollar = mean(dollar),
    bang = mean(bang),
    money = mean(money),
    n000 = mean(n000),
    make = mean(make),
            .by = yesno) |>
  gt() |>
  tab_header(
 title= "mean of Variables") |>
  fmt_number(decimals=2)
```
@table1 shows that for the variable(crl.tot): The average value in spam emails (409.26) is significantly higher than in non-spam emails (157.83). For the variable (dollar):
the occurrence of the "$" symbol in spam emails is 13%, whereas in non-spam emails, it is only 1%. For the variable (bang!): the "!" symbol appears in 31% of spam emails, while in non-spam emails, it appears only 5% of the time. For the word "money" occurrence: The word "money" appears in 15% of spam emails, whereas in non-spam emails, it appears only 1% of the time. For the occurrence of "000" (n000): "000" appears in 15% of spam emails, but is almost nonexistent (0%) in non-spam emails. For the word "make" occurrence: The word "make" appears in 11% of spam emails, while in non-spam emails, it appears only 3% of the time.

```{r}
#| label: table2
#| tbl-cap: summary of median
data |>
  summarize(
    crl.tot = median(crl.tot),
    dollar = median(dollar),
    bang = median(bang),
    money = median(money),
    n000 = median(n000),
    make = median(make),
    .by = yesno) |>
  gt() |>
  tab_header(
 title= "median of Variables") |>
  fmt_number(decimals=2)
```
@table2 shows that for the variable (crl.tot): The median value in spam emails (190.50) is significantly higher than in non-spam emails (54.00). For the variable (dollar): The occurrence of the "$" symbol in spam emails has a median value of 0.06, whereas in non-spam emails,it is 0.00. For the variable (bang!): The "!" symbol appears in 25% of spam emails, while in non-spam emails, the median value is 0.00. For the word "money" occurrence: The median occurrence of "money" is 0.00 for both spam and non-spam emails. For the occurrence of "000" (n000): The median occurrence of "000" is 0.00 for both spam and non-spam emails. For the word "make" occurrence: The median occurrence of "make" is 0.00 for both spam and non-spam emails.

Based on the @table1 and @table2,the result shows that most mean values greater than median values may indicate right skewness.

####correlation
the followed figure shows the correlation between the variables.
```{r}
#| label: figure1
#| fig-cap: Corrplot
cor_matrix <- cor(data[, c("crl.tot", "dollar", "bang", "money", "n000", "make")])
corrplot::corrplot(cor_matrix, method = "number") 
```
As @figure1 shows, The maximum correlation between variables is 0.4, indicating that the correlation between variables is not high. Therefore, interaction terms will not be considered in the model.

####Variable Visualization
```{r}
#| label: figure 2
#| fig-cap: Crl.tot by Class
ggplot(data, aes(x=yesno, y=crl.tot, fill=yesno)) +
  geom_boxplot() 
```

```{r}
#| label: figure 3
#| fig-cap: Crl.tot Density by Class
ggplot(data, aes(x=crl.tot, fill=yesno)) +
  geom_density(alpha=0.5)
```


```{r}
#| label: figure 4
#| fig-cap: Bang by Class
ggplot(data, aes(x=yesno, y=bang, fill=yesno)) +
  geom_boxplot() 
```

```{r}
#| label: figure 5
#| fig-cap: Bang Density by Class
ggplot(data, aes(x=bang, fill=yesno)) +
  geom_density(alpha=0.5)
```

```{r}
#| label: figure 6
#| fig-cap: Money by Class
ggplot(data, aes(x=yesno, y=money, fill=yesno)) +
  geom_boxplot()
```

```{r}
#| label: figure 7
#| fig-cap: Money Density by Class
ggplot(data, aes(x=money, fill=yesno)) +
  geom_density(alpha=0.5) 
```


```{r}
#| label: figure 8
#| fig-cap: Dollar by Class
ggplot(data, aes(x=yesno, y=dollar, fill=yesno)) +
  geom_boxplot()
```

```{r}
#| label: figure 9
#| fig-cap: Dollar Density by Class
ggplot(data, aes(x=dollar, fill=yesno)) +
  geom_density(alpha=0.5)
```

```{r}
#| label: figure 10
#| fig-cap: N000 by Class
ggplot(data, aes(x=yesno, y=n000, fill=yesno)) +
  geom_boxplot() 
```

```{r}
#| label: figure 11
#| fig-cap: N000 Density by Class
ggplot(data, aes(x=n000, fill=yesno)) +
  geom_density(alpha=0.5)
```


```{r}
#| label: figure 12
#| fig-cap: Make by Class
ggplot(data, aes(x=yesno, y=make, fill=yesno)) +
  geom_boxplot()
```

```{r}
#| label: figure 13
#| fig-cap: Make Density by Class
ggplot(data, aes(x=make, fill=yesno)) +
  geom_density(alpha=0.5)
```


#Replace values below the 1st percentile with the 1st percentile value and values over the 99th percentile with the 99th percentile value, then standardize the data to mitigate the effects of outliers and right skewness. Due to the wide distribution and right-skewed nature of crl.tot, we substitute it with log(data\$crl.tot + 1).

```{r}
data1<-data
win <- function(x, lower_perc = 0.01, upper_perc = 0.99) {
  x <- as.numeric(x)
  q <- quantile(x, probs = c(lower_perc, upper_perc), na.rm = TRUE)
  x[x < q[1]] <- q[1]
  x[x > q[2]] <- q[2]
  return(x)
}
numeric_vars <- c("crl.tot", "dollar", "bang", "money", "n000", "make")
data[numeric_vars] <- lapply(data[numeric_vars], win)
data[,1:6]<-scale(data[,1:6])
data$crl.tot_log <- log(data$crl.tot+1)

```

$$Y_i \sim \mathrm{Bernoulli}(p_i)$$

$$\quad \log\left( \frac{p_i}{1 - p_i} \right) = \beta_0 + \beta_1 \text{crl.tot}_i + \beta_2 \text{dollar}_i + \beta_3 \text{bang}_i + \beta_4 \text{money}_i + \beta_5 \text{n000}_i + \beta_6 \text{make}_i$$

-**$Y_i$** is ..

-**$\text{crl.tot}_i$** is..

-**$\text{dollar}_i$** is..

-**$\text{bang}_i$** is..

-**$\text{money}_i$** is

-**$\text{n000}_i$** is

-**$\text{make}_i$** is ..

$$\quad \log\left( \frac{p_i}{1 - p_i} \right) = \beta_0 + \beta_1 log(\text{crl.tot}_i) + \beta_2 \text{dollar}_i + \beta_3 \text{bang}_i + \beta_4 \text{money}_i + \beta_5 \text{n000}_i + \beta_6 \text{make}_i$$

-**$Y_i$** is ..

-**$log(\text{crl.tot}_i)$** is..

-**$\text{dollar}_i$** is..

-**$\text{bang}_i$** is..

-**$\text{money}_i$** is

-**$\text{n000}_i$** is

-**$\text{make}_i$** is ..

```{r}
model_original <- glm(yesno ~ crl.tot + dollar + bang + money + n000 + make,
             family = binomial(link = "logit"),
             data = data1)

summary(model_original)

model_scale <- glm(yesno ~ crl.tot + dollar + bang + money + n000 + make,
             family = binomial(link = "logit"),
             data = data)

summary(model_scale)

model_scale_log <- glm(yesno ~ bang + crl.tot_log + dollar+money+n000+make,
               family = binomial(link = "logit"), data = data)
summary(model_scale_log)

AIC(model_original,model_scale,model_scale_log)
BIC(model_original,model_scale,model_scale_log)
```

```{r}
#| label: figure 14
#| fig-cap: Coefficient Estimates with p-Values 
plot_model(model_scale_log, show.values = TRUE, show.p = TRUE)
```

```{r}
#| label: figure 15
#| fig-cap: Marginal Predicted Effects
plot_model(model_scale_log, type = "pred", title = "",col='steelblue')
```


# Further Work

```{r}
set.seed(123)
index <- createDataPartition(data$yesno, p = 0.7, list = FALSE)
train_data <- data[index, ]
test_data <- data[-index, ]
```

```{r}
glm_model <- glm(yesno ~ bang + crl.tot_log + dollar+money+n000+make, data = train_data, family = binomial(link = 'logit'))

glm_pred_prob <- predict(glm_model, newdata = test_data, type = "response")
glm_pred_class <- ifelse(glm_pred_prob > 0.5,'y','n')
glm_confusion <- confusionMatrix(factor(glm_pred_class), factor(test_data$yesno))
glm_roc <- roc(test_data$yesno, glm_pred_prob)
```

```{r}
set.seed(123)
rf_model <- randomForest(yesno ~ bang + crl.tot_log + dollar+money+n000+make, data = train_data, ntree = 500, importance = TRUE)

rf_pred_prob <- predict(rf_model, newdata = test_data, type = "prob")[, 2]
rf_pred_class <- ifelse(rf_pred_prob > 0.5,'y','n')

rf_confusion <- confusionMatrix(factor(rf_pred_class), factor(test_data$yesno))
rf_roc <- roc(test_data$yesno, rf_pred_prob)
```

```{r}
#| label: figure 16
#| fig-cap: RF Variable Importance Ranking
varImpPlot(rf_model)
```


```{r}
get_model_metrics <- function(model_name, confusion,k) {
  data.frame(
    Model = model_name,
    Accuracy = confusion$overall["Accuracy"],
    Sensitivity = confusion$byClass["Sensitivity"],
    Specificity = confusion$byClass["Specificity"],
    Precision = confusion$byClass["Precision"],
    AUC=as.numeric(k$auc),
    stringsAsFactors = FALSE
  )
}
results <- bind_rows(
  get_model_metrics("Random Forest", 
                   confusion = rf_confusion,k=rf_roc),
  get_model_metrics("GLM",
                   confusion = glm_confusion,k=glm_roc)
) %>% 
  mutate(across(-Model, ~ round(., 3)))

knitr::kable(results, align = "c")
```

```{r}
#| label: figure 17
#| fig-cap: ROC Curve Comparison (GLM & RF)
plot(glm_roc, col = "blue")
lines(rf_roc, col = "red")
legend("bottomright", legend = c("GLM", "randomForest"), col = c("blue", "red"), lwd = 2)
```
